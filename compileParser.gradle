def antlr_jar = "antlr-4.5.3-complete.jar"
def antlr_tool = "../../../tools/" + antlr_jar
def grammarFolder = "src/org/chor"
def parserDest = "src-gen"
def javaCodebase = "src/org/chor"

task generateParser( type: Exec, dependsOn: "cleanDestination" ) {
  doFirst {
    workingDir = grammarFolder
    executable = "java"
    args = [  "-jar" , antlr_tool,
              "-o", parserDest,
              "chor.g4" ]
    ext.output = { return standardOutput.toString() }
  }
  doLast { println "generated Java parser" }
}

task cleanDestination << {
  println "cleanDestination"
  File destFolder = new File( javaCodebase + "/" + parserDest )
  destFolder.deleteDir()
  new File( javaCodebase, parserDest ).mkdirs()
}

// task moveGeneratedParser << {
//   println "moveGeneratedParser"
//   String from = grammarFolder + "/" + parserDest
//   String to = javaCodebase + "/" + parserDest
//   file ( from ).renameTo( file( to ) )
//   new File( from ).deleteDir()
// }

apply plugin: "java"

dependencies {
  compile files( "tools/" + antlr_jar )
}

compileJava {
  source = javaCodebase + "/" + parserDest
}

task compileParser {
  dependsOn generateParser
  dependsOn compileJava
}